{"version":3,"sources":["components/logo.svg","components/loading.svg","components/Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","AlbumCover","track","src","album","images","url","style","width","height","getRandomNumber","x","Math","floor","random","App","useState","tracks","setTracks","songsLoaded","setSongsLoaded","currentTrack","setCurrentTrack","timeoutId","setTimeoutId","useEffect","fetch","method","headers","Authorization","then","response","json","data","items","randomIndex","length","setTimeout","getNewTrack","className","loading","alt","randomIndex1","randomIndex2","track1","propositions","array","counter","index","temp","shuffleArray","logo","preview_url","playStatus","Sound","status","PLAYING","map","checkAnswer","id","clearTimeout","swal","name","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3d40b32b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React, { useEffect, useState } from \"react\";\nimport logo from \"./components/logo.svg\";\nimport loading from \"./components/loading.svg\";\nimport \"./App.css\";\nimport Sound from \"react-sound\";\nimport Button from \"./components/Button\";\n\nconst apiToken =\n  \"BQAfAt1fU6-v9bErnmr0T7mhJGXcgieVV4mNokxl2NIg4oGLEJ1QuNTO3Ys7fETbSqBogO0rWbG5zuPFHpuIDT6xUkHLiRGG5Jos2CuI2rWSVtlEvJMVmrdFbFiVXP__FEKGeCK9WzzzShLo1bYVX9Z4u98OpHVaTPfooNCJYb_a\";\n\nconst AlbumCover = ({ track }) => {\n  const src = track.album.images[0].url; // A changer ;)\n  return <img src={src} style={{ width: 400, height: 400 }} />;\n};\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nconst App = () => {\n  const [tracks, setTracks] = useState();\n  const [songsLoaded, setSongsLoaded] = useState(false);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [timeoutId, setTimeoutId] = useState();\n\n  useEffect(() => {\n    fetch(`https://api.spotify.com/v1/me/tracks`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + apiToken,\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setTracks(data.items);\n        const randomIndex = getRandomNumber(data.items.length);\n        setCurrentTrack(data.items[randomIndex].track);\n        setSongsLoaded(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    setTimeoutId(setTimeout(() => getNewTrack(), 30000));\n  }, [currentTrack]);\n\n  const checkAnswer = (id) => {\n    if (currentTrack.id === id) {\n      clearTimeout(timeoutId);\n      swal(\"Bravo !\", \"Tu as gagné\", \"success\").then(() => getNewTrack());\n    } else {\n      swal(\"Essaye encore\", \"Ce n’est pas la bonne réponse\", \"error\");\n    }\n  };\n  if (!songsLoaded) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={loading} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n  const getNewTrack = () => {\n    if (!tracks) {\n      return;\n    }\n    const randomIndex = getRandomNumber(tracks.length);\n    setCurrentTrack(tracks[randomIndex].track);\n  };\n\n  const randomIndex1 = getRandomNumber(tracks.length);\n  const randomIndex2 = getRandomNumber(tracks.length);\n\n  const track1 = currentTrack;\n  const track2 = tracks[randomIndex1].track;\n  const track3 = tracks[randomIndex2].track;\n\n  const propositions = shuffleArray([track1, track2, track3]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-title\">Bienvenue sur le Blindtest Coucou</h1>\n      </header>\n      <div className=\"App-images\">\n        <AlbumCover track={track1} />\n        <Sound\n          url={currentTrack.preview_url}\n          playStatus={Sound.status.PLAYING}\n        />\n      </div>\n      <div className=\"App-buttons\">\n        {propositions.map((track) => (\n          <Button onClick={() => checkAnswer(track.id)}>{track.name}</Button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}